# -*- coding: utf-8 -*-
"""Group_Assignment_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h6wcSF3RpKVBwSgSl7YxfNkr0mBgk1UL

# Task

Select one of your previous projects that includes a machine learning component and use MLflow to track and manage your machine learning experiments. The following tasks should be performed:

- Train a machine learning model using the data from your previous project. You can use any machine learning model that is appropriate for your data and problem.

- Use MLflow to track and manage your machine learning experiments. Log the hyperparameters, metrics, and artifacts of your machine learning experiments in MLflow. Save structured and unstructured information related to your trained model in SQLite within MLflow.

# Imports
"""

!pip install mlflow -q

import pandas as pd
import sqlite3

pd.set_option('max_colwidth', 1000)
pd.describe_option('max_colwidth')

"""# Cleaning the data"""

# Reading the CSV files into Pandas Dataframes and merging them together based on player ID
baseball_master = pd.read_csv('https://raw.githubusercontent.com/NadiaHolmlund/M6_Group_Assignments/main/Group_Assignment_3/Data/Master.csv', encoding="ISO-8859-1")
baseball_batting = pd.read_csv('https://raw.githubusercontent.com/NadiaHolmlund/M6_Group_Assignments/main/Group_Assignment_3/Data/Batting.csv', encoding="ISO-8859-1")

baseball = baseball_master.merge(baseball_batting, on = 'playerID')

# Examining the DataFrame
baseball.head()

# Examining the DataFrame
baseball.info()

# Extracting columns to be included in the database
baseball_db = baseball[['weight', 'height', 'G', 'AB', 'HR']]

# Dropping NaN values
baseball_db = baseball_db.dropna()

# Examining the dataFrame
baseball_db.info()

"""# Setting up the Data Layer

Creating a SQLite database for the baseball dataset
"""

#database.py
import sqlite3
import pandas as pd

def init_db():
  # Connect to the SQLite database
  conn = sqlite3.connect("baseball.db")

  # Save the Pandas DataFrame to the SQLite database
  baseball_db.to_sql("baseball", conn, if_exists="replace", index=False)

  # Close the connection to the SQLite database
  conn.close()

if __name__ == '__main__':
    init_db()

"""# Setting up the Business Layer with MLFlow

Using the Scikit-Learn library to train a machine learning model for HR prediction.

The code also sets up an experiment named "HR_Prediction_exp_x" and logs the model's parameters, performance metrics, and the trained model itself as an artifact in MLflow.
"""

import mlflow
import mlflow.sklearn
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
import sqlite3
import pandas as pd

# Connect to the SQLite database
conn = sqlite3.connect("baseball.db")

# Read data from a table using Pandas
data_df = pd.read_sql("SELECT * FROM baseball", conn)

def train_model():
    mlflow.set_experiment("HR_Prediction_exp_0")
    X = data_df.drop('HR', axis=1)
    y = data_df['HR']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    RFR = RandomForestRegressor(n_estimators=100, criterion="squared_error")

    with mlflow.start_run():
        RFR.fit(X_train, y_train)

        # Log model parameters
        mlflow.log_param("n_estimators", RFR.n_estimators)
        mlflow.log_param("criterion", RFR.criterion)

        # Log model performance metrics
        train_score = RFR.score(X_train, y_train)
        test_score = RFR.score(X_test, y_test)
        mlflow.log_metric("train_score", train_score)
        mlflow.log_metric("test_score", test_score)

        # Save the model as an artifact
        mlflow.sklearn.log_model(RFR, "model")

    return RFR, test_score

if __name__ == '__main__':
    RFR, accuracy = train_model()
    print(f"Model trained with accuracy: {accuracy}")
    mlflow.log_metric("accuracy", accuracy)
    mlflow.sklearn.log_model(RFR, "model")
    mlflow.sklearn.log_model(RFR, "model", registered_model_name="HR_model")
    mlflow.sklearn.save_model(RFR, "HR_model")

    # Launch MLflow UI
    import os
    os.system("mlflow ui")

"""# Experiments saved in MLFlow

## HR_Prediction_exp_0

![picture](https://raw.github.com/NadiaHolmlund/M6_Group_Assignments/main/Group_Assignment_3/Data/HR_Prediction_exp_0.png)

## HR_Prediction_exp_1

![picture](https://raw.github.com/NadiaHolmlund/M6_Group_Assignments/main/Group_Assignment_3/Data/HR_Prediction_exp_1.png)

## HR_Prediction_exp_2

![](https://raw.github.com/NadiaHolmlund/M6_Group_Assignments/main/Group_Assignment_3/Data/HR_Prediction_exp_2.png)
"""